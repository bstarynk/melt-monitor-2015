# file cmodbty.mb -*- indented-text -*-

^global !uint8_t (
  ^* comment "the uint8_t type of 8 bit unsigned"
  ^* descr type
  ^* c_code "uint8_t"
  )

^global !uint16_t (
  ^* comment "the uint16_t type of 16 bit unsigned"
  ^* descr type
  ^* c_code "uint16_t"
  )
^global !uint32_t (
  ^* comment "the uint32_t type of 32 bit unsigned"
  ^* descr type
  ^* c_code "uint32_t"
  )

^global !hash_t (
  ^* comment "the unsigned type of hash-code"
  ^* descr type
  ^* c_code "momhash_t"
  )

^global !atomic_int16_t (
  ^* comment "the atomic_int16_t type of 16 bit signed and atomic"
  ^* descr type
  ^* c_code "mom_atomic_int16_t"
  )

^global !bool (
  ^* comment "the type for booleans"
  ^* descr type
  ^* c_code "bool"
)

^global !anyvalue_ty (
  ^global
  ^* comment "the type of any value"
  ^* descr type
  ^* type struct
  ^* struct [
      ^global !va_itype (
        ^* comment "the field giving the type"
        ^* descr field
        ^* type uint16_t
      )
      ^global !va_ixv (
        ^* comment "the field giving the index"
        ^* descr field
        ^* type atomic_int16_t
      )
      ^global !va_size (
        ^* comment "the field giving the size"
        ^* descr field
        ^* type atomic_int16_t
      )
  ]
)
  
^global !hashedvalue_ty (
  ^* comment "the type of hashed value"
  ^* descr type
  ^* type struct
  ^* extend anyvalue_ty
  ^* struct [
      ^global !hva_hash (
        ^* comment "the field giving the hash"
        ^* descr field
        ^* type hash_t
      )
  ]
)

^global !val0 (
   ^* comment "val0 in cmodbty.mb"
   ^* descr formal
   ^* type value
)


^global !val1 (
   ^* comment "val1 in cmodbty.mb"
   ^* descr formal
   ^* type value
)

^global !signature_2values_to_bool (
  ^* descr signature
  ^* formals [ val0 val1 ]
  ^* result bool
)

^global !signature_value_to_bool (
  ^* descr signature
  ^* formals [ val0 ]
  ^* result bool
)


^item is_null (
  ^* descr primitive
  ^* signature signature_value_to_bool
  ^* notice not
  ^* c_expansion %code_chunk(
    "/*is_null*/ ((" val0 " ) == NULL)"
  )
)

^global !flag0 (
   ^* comment "flag0 in cmodbty.mb"
   ^* descr formal
   ^* type bool
)

^global !signature_bool_to_bool (
  ^* descr signature
  ^* formals [ flag0 ]
  ^* result bool
)


^global !num0 (
   ^* comment "num0 in cmodbty.mb"
   ^* descr formal
   ^* type int
)


^global !num1 (
   ^* comment "num1 in cmodbty.mb"
   ^* descr formal
   ^* type int
)

^global !signature_2ints_to_int (
  ^* descr signature
  ^* formals [ num0 num1 ]
  ^* result int
)

^global !signature_2ints_to_bool (
  ^* descr signature
  ^* formals [ num0 num1 ]
  ^* result bool
)

^global !signature_value_to_int (
  ^* comment "signature value -> int"
  ^* formals [ val0 ]
  ^* result int
)

^global !cast_pointer_to_int_prim (
  ^* comment "primitive to cast a pointer to an int"
  ^* descr primitive
  ^* signature signature_value_to_int
  ^* c_expansion %code_chunk(
      "/*cast_pointer_to_int_prim*/ (intptr_t)(" val0 ")" )
)

^global !not_bool_prim (
  ^* comment "primitive for negation of bool"
  ^* descr primitive
  ^* signature signature_bool_to_bool
  ^* c_expansion %code_chunk(
      "/*not_bool_prim*/ !(" flag0 ")" )
)

^global !unsafe_int_mod_prim (
  ^* comment "unsafe primitive for modulus of int"
  ^* descr primitive
  ^* signature signature_2ints_to_int
  ^* c_expansion %code_chunk(
      "/*unsafe_int_mod_prim*/ ((" num0 ") % (" num1 "))")
)

^global !same_value_prim (
  ^* comment "primitive to test identities of 2 values"
  ^* descr primitive
  ^* signature signature_2values_to_bool
  ^* c_expansion %code_chunk(
      "/*same_value_prim*/ ((" val0 ") == (" val1 "))" )
)

^global !equal_int_prim (
  ^* comment "primitive to test equality of 2 ints"
  ^* descr primitive
  ^* signature signature_2ints_to_bool
  ^* c_expansion %code_chunk(
      "/*equal_int_prim*/ ((" num0 ") == (" num1 "))" )
)


^global !empty_slot (
  ^* comment "constant for MOM_EMPTY_SLOT"
  ^* descr constant
  ^* c_expansion %code_chunk(
       "/*empty_slot*/ MOM_EMPTY_SLOT" )
)



^global !valid_value_pointer (
  ^* comment "inline function testing validity of value pointer"
  ^* descr inline
  ^* signature signature_value_to_bool
  ^* body  ^global ?valid_value_pointer (
       ^* comment "body of valid_value_pointer"
       ^* descr sequence
       ^* body
       [
         ^global ?cond (
	   ^* comment "cond for nil or empty slot or int"
	   ^* descr cond
	   ^* cond [
	     ^global ?test (
	       ^* descr test
	       ^* comment "test for nil"
	       ^* test %is_null(val0)
	       ^* then ^global ?return (
	         ^* descr return
		 ^* comment "return false when nil value"
	       )
	     )
	     ^global ?test (
	       ^* descr test
	       ^* comment "test for empty_slot"
	       ^* test %same_value_prim(val0 empty_slot)
	       ^* then ^global ?return (
	         ^* descr return
		 ^* comment "return false when empty slot"
	       )
	     )
	     ^global ?test (
	       ^* descr test
	       ^* comment "test for odd addresses"
	       ^* test
	         %unsafe_int_mod_prim(%cast_pointer_to_int_prim(val0)
			              2)
	       ^* then ^global ?return (
	         ^* descr return
		 ^* comment "return false when odd address"
	       )
	     )
	     ^global ?test (
	       ^* descr test
	       ^* comment "test for odd addresses"
	       ^* test
	         %unsafe_int_mod_prim(%cast_pointer_to_int_prim(val0)
			              2)
	       ^* then ^global ?return (
	         ^* descr return
		 ^* comment "return false when odd address"
	       )
	     )
	     ^global ?test (
	       ^* descr test
	       ^* comment "otherwise return truth
	       ^* test truth
	       ^* then ^global ?return (
	         ^* descr return
		 ^* comment "return otherwise truth"
		 ^* return truth
	       )
	     )
	   ]
	 )
       ]
   )
)

^global !bty_module (
   ^* comment "our bty_module from cmodbty.mb"
   ^* descr module
   ^* module [
     anyvalue_ty hashedvalue_ty valid_value_pointer 
   ]
)

^display "final bty_module:" bty_module

## eof cmodbty.mb
