# file cmod0c.mb -*- indented-text -*-


^item !val0 (
   ^* comment "val0 in cmod0.mb"
   ^* descr formal
   ^* type value
)


^item !str0 (
   ^* comment "str0 in cmod0.mb"
   ^* descr formal
   ^* type string
)

^item !signature_func_value_to_void (
   ^* comment "func signature: value -> void, in cmod0c.mb"
   ^* descr signature
   ^* formals [ this_closure val0 ]
   ^* result unit
)
^display "funcsig value->void:" signature_func_value_to_void


^item !signature_rout_value_to_item (
   ^* comment "func signature: value -> item, in cmod0c.mb"
   ^* descr signature
   ^* formals [ val0 ]
   ^* result item
)
^display "routsig value->item:" signature_rout_value_to_item


^item !signature_string_value_to_void (
   ^* comment "signature: string, value -> void, in cmod0.mb"
   ^* descr signature
   ^* formals [ str0 val0 ]
   ^* result unit
)

^display "sig str,value->void:" signature_string_value_to_void

^item !show_msg_value_prim (
  ^* comment "primitive to show a value with a message"
  ^* descr primitive
  ^* signature signature_string_value_to_void
  ^* c_expansion %code_chunk(
    "do {long _nl=ftell(stdout); fputs(("  str0  "), stdout);\n"
    "mom_output_value(stdout,&_nl,0, ("  val0  "));putchar(\'\\n\');}while(0)"
  )
)

^item !dyncast_item_prim (
  ^* comment "primitive to cast a value to an item"
  ^* descr primitive
  ^* signature signature_rout_value_to_item
  ^* c_expansion %code_chunk(
    "mom_dyncast_item("  val0  ")"
  )
)

^name $runinstrshowval0 ^item ?run (
  ^* descr run
  ^* comment "show the val0 using show_msg_value_prim"
  ^* run show_msg_value_prim
  ^: (
    "tiny-showing: "
    val0
  )
)

^display "runinstrshowval0:" $runinstrshowval0

^name $runinstrshowthesys ^item ?run (
  ^* descr run
  ^* comment "show the_system using show_msg_value_prim"
  ^* run show_msg_value_prim
  ^: (
    "showing the_system: "
    the_system
  )
)
	 

^name $switchinstrval0item  ^item ?switch (
  ^* descr switch
  ^* switch item
  ^* arg %dyncast_item_prim(val0)
  ^* case {
    ^item ?case (
      ^* comment "case for be&cooked"
      ^* descr case
      ^* case { be cooked truth }
      ^* run ^item ?cooked (
        ^* comment "runcaseinstr for be&cooked"
        ^* descr run
        ^* comment "show be using show_msg_value_prim"
  	^* run show_msg_value_prim
  	^: (
    	  "showing be: "
    	  be
  	)
      )
    )
    ^item ?case (
      ^* comment "case for comma"
      ^* descr case
      ^* case comma
      ^* run ^item ?comma (
        ^* comment "runcaseinstr for comma"
        ^* descr run
        ^* comment "show be using show_msg_value_prim"
  	^* run show_msg_value_prim
  	^: (
    	  "showing comma: "
    	  comma
	)
      )
    )
  }
)
  
^item !tiny_func (
   ^* comment "our tiny_func from cmod0c.mb"
   ^* descr func
   ^* signature signature_func_value_to_void
   ^* body ^item ?body (
       ^* comment "body of tiny_func"
       ^* descr sequence
       ^* body
       [ $runinstrshowval0  $runinstrshowthesys $switchinstrval0item ]
   )
)


^item !tiny_module (
   ^* comment "our tiny_module from cmod0.mb"
   ^* descr module
   ^* module [
     tiny_func
   ]
)


^display "final tiny_module:" tiny_module

#eof cmod0c.mb
